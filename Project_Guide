- Database prepopulated with sample data
  - At least three rows per table

- At least 4 entities and 4 relationships
  - 1 must be a M:M
  - Must implement operational requirements of project
  
 - NOT a customer facing website
  - no need for login page; sessions; register/password; shopping cart; check-out; etc. 
  
 - EXAMPLE WEBPAGE LAYOUT
  -  if you had 4 entities that were implemented as 5 tables in a database, then we expect roughly 5 web app pages as a 
      front end UX for each of the 5 tables in your database.
      
 - One exception is oftentimes it works better for the UX to have a single web page for a
    Many-to-Many relationship between 2 tables (so the user doesn't have to view two pages to complete a 
    transaction in both tables). So in that case if you had 4 entities that were implemented as 5 tables, 
    with 1 many-to-many relationship between 2 of those tables, and the 2 tables in that m:m were managed on a single web page,
    then we expect 4 web pages in the project. 
 
 - Home page is NOT required
 
 - Should be possible to INSERT entries individually
 
 - Every table used in at least one SELECT query.
   - For queries:
    - It is ok to just display content of the tables.
    - DO NOT have only a single query that joins all tables and displays them.
    
 - Include one DELETE and one UPDATE function in website for any one of the entities. 
  - Should be possible to add and remove from at least one M:M relationship
  - Should be possible to add things to all relationships.
  - Need SELECT and INSERT functionality for all relationships as well as entities. 
  - DELETE and UPDATE for at least one M:M relationship

- NOT acceptable to require user to enter IDS for foreign keys.
  - Need dynamically populated drop-down list or have ability to search using text instead of entering the ID.
    - Needs to be present for at least one entity

- Should be able to set foreign key value to NULL using UPDATE that removes the relationship in at least one relationship.
  - In case none of the one-to-many relationships in your database has optional participation, you would need to change that to make
    sure one can have NULL values. For example, in the table Orders, there may be two FKs: the employeeID and the customerID which create 
    relations to the Employees and Customers tables. It may not be sensible for the Customer to be optional. But the Employee could be 
    optional. Thus, we would expect that in the Orders INSERT and UPDATE pages it is possible to set the employeeID to a value or else to NULL. 
    
- You should be able to DELETE a record from a M:M relationship without creating a data anomaly in the related tables. 
  - For example, DELETEing a Customer should handle any Orders that were made by the Customer. This can be done by either by setting the CustomerID to NULL,
    or else by DELETEing any Order(s) associated with that Customer. More on how this can be done in Week 5 when we cover MySQL CASCADE Links to an external site.. 
    
- Example format:
  - if you have 5 tables in your schema, then at a minimum, we expect you to implement 
    -5 SELECTs, 
    -5 INSERTs, 
    -1 UPDATE (1 NULLable relationship), 
    -1 DELETE (M:M), and 1 Dynamic drop-down/Search for a total of 14 functions. 
